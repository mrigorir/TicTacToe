#!/usr/bin/env ruby
require_relative '../lib/logic'
require_relative '../lib/players'
# ------- Methods --------- #
module GameMethods
  def self.gaming(players, board)
    players = players
    puts "#{players[0]} is going to play with X\n"
    puts "#{players[1]} is going to play with O\n\n"
    puts "Great ! #{players[0]} and #{players[1]} let start the battle !!\n\n\n"

    disply_board(board)
  end

  def self.disply_board(board)
    position = 0
    while position < board.length
      if (position % 3).zero?
        puts ''
        print "---+---+---+\n"
      end
      print " #{board[position]} |"
      position += 1
    end
    puts "\n---+---+---+"
    puts "\n"
  end

  def self.actual_board(input_user, board, player_char, player)
    current_player = player
    print "\n#{current_player}, the '#{player_char}' player has chosen spot ##{input_user}\n"
    board[input_user - 1] = player_char
    disply_board(board)
  end

  def self.create_players(player_char, players, tic_tac_toe)
    i = 0
    while i < 2
      print "Enter pseudo for Player #{i + 1}: "
      input = gets.chomp
      test = Player.new(input, player_char[i])
      players << test.name
      if tic_tac_toe.pseudo_empty?(players[i])
        while tic_tac_toe.pseudo_empty?(players[i])
          puts "Don't leave player names empty"
          print "Enter pseudo for Player #{i + 1}: "
          players[i] = gets.chomp
        end
      end
      i += 1
    end
    players
  end

  def self.check_input(player)
    print "#{player}, choose a position from (1-9) to place in the board: "
    temp = gets.chomp
    if temp =~ /[1-9]/ && temp.to_i.between?(1, 9)
      input_user = temp.to_i
      input_user
    else
      false
    end
  end
end

# ------ End ------------- #

def global(player_char, temp)
  board = %w[1 2 3 4 5 6 7 8 9]
  players = []
  usedd = []
  tic_tac_toe = TicTacToe.new
  indexes_win = [[1, 5, 9], [1, 2, 3], [1, 4, 7], [2, 5, 8], [3, 5, 7], [3, 6, 9], [4, 5, 6], [7, 8, 9]]
  county = 1
  state = true
  system('clear') || system('cls')
  puts "Welcome to our amazing Tic Tac Toe !!\n\n\n"

  players = GameMethods.create_players(player_char, players, tic_tac_toe)
  GameMethods.gaming(players, board)
  i = 0
  while i < 9
    j = 0
    while j < 2
      if state != false
        temp = GameMethods.check_input(players[j])
        until temp
          print "Invalid input !\n "
          temp = GameMethods.check_input(players[j])
          temp
        end
        taken_result = tic_tac_toe.taken?(temp, usedd)
        while taken_result && temp
          print "Splot Already taken.\n"
          temp = GameMethods.check_input(players[j])
          until temp
            print "Invalid input !\n "
            temp = GameMethods.check_input(players[j])
            temp
          end
          taken_result = tic_tac_toe.taken?(temp, usedd)
          taken_result
        end
        GameMethods.actual_board(temp, board, player_char[j], players[j])
        state = tic_tac_toe.arbiter(temp, player_char[j], players[j], indexes_win)
        county += 1
      end
      if county == 9 && !tic_tac_toe.state.nil?
        p tic_tac_toe.state
        break
      end
      j += 1
    end
    i += 1
    break if county == 9 && state == false
  end
  p tic_tac_toe.state
end

player_char = %w[X O]
temp = ''

global(player_char, temp)

puts "\n Game over!"

print " \n Do you want do play again? (Y/N): "
choice = gets.chomp
inside = true if choice.include?('Y')
while inside
  system('clear') || system('cls')
  puts "Welcome to our amazing Tic Tac Toe !!\n\n\n"
  global(player_char, temp)
  print " \n Do you want do play again? (Y/N): "
  choice = gets.chomp
  break if choice != 'Y'
end

puts 'Good Bye'